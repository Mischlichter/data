name: Image Metadata Extraction

on:
  push:
    paths:
      - 'gallerycom/**'

jobs:
  extract-metadata:
    runs-on: ubuntu-latest
    outputs:
      html_files_exist: ${{ steps.check-html-files.outputs.html_files_exist }}
    steps:
      - uses: actions/checkout@v4  # Updated to use the latest version supporting Node.js 20

      - name: Set up Python
        uses: actions/setup-python@v5  # Updated to the latest version
        with:
          python-version: '3.10'  # Specific version to match with your requirements

      - name: Install Python Dependencies
        run: pip install Pillow

      - name: Install exiftool
        run: |
          sudo apt-get update
          sudo apt-get install -y exiftool

      - name: Run Metadata Extraction Script
        run: python lib/library_and_pages_x.py

      - name: Stash any changes
        run: git stash

      - name: Pull latest changes from the repository
        run: git pull --rebase

      - name: Pop the stash
        run: git stash pop

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'Mischlichter'
          git config --global user.email 'alex.stephan.weimar@web.de'
          git add lib/metadata.json
          git add docs/sharing/*.html
          git add docs/sharing/*_favicon.ico
          git commit -m "Update image metadata, HTML pages, and favicons" || echo "No changes to commit"
          git push || echo "Failed to push changes. Check for potential conflicts or issues."

      - name: List Committed HTML Files
        id: check-html-files
        run: |
          html_changed=$(git diff --name-only HEAD^ HEAD | grep -q '\.html$'; echo $?)
          if [ "$html_changed" -eq 0 ]; then
            echo "html_files_exist=true" >> $GITHUB_ENV
            echo "html_files_exist=true" >> $GITHUB_OUTPUT
            git diff --name-only HEAD^ HEAD | grep '\.html$' > html_files.txt
          else
            echo "html_files_exist=false" >> $GITHUB_ENV
            echo "html_files_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload HTML file list
        if: env.html_files_exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: html-files
          path: html_files.txt

  check-live-status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download service account JSON file
        run: |
          curl -o service-account.json https://raw.githubusercontent.com/Mischlichter/data/main/lib/blibla.json

      - name: Download HTML files list
        uses: actions/download-artifact@v2
        with:
          name: html-files

      - name: Check and Visit New Pages
        run: |
          if [ ! -f html_files.txt ]; then
            echo "No HTML files to process."
            exit 0
          fi

          cat html_files.txt  # Output file content for debugging
          IFS=$'\n' read -r -a html_files <<< "$(cat html_files.txt)"

          for file in "${html_files[@]}"; do
            filename="${file#docs/sharing/}"  # Removes 'docs/sharing/' from the path
            url="https://hogeai.com/sharing/${filename}"
            echo "Checking URL: $url"
            while ! curl --output /dev/null --silent --head --fail --location --write-out '%{http_code}' "$url" | grep '200'; do
              echo "Waiting for $url to be live..."
              sleep 5
            done

            # Submit URL to Google
            echo "Submitting URL to Google and Bing"
            client_email=$(jq -r '.client_email' service-account.json)
            private_key=$(jq -r '.private_key' service-account.json)

            jwt_token=$(echo -n "{\"alg\":\"RS256\",\"typ\":\"JWT\"}.{\"iss\":\"$client_email\",\"scope\":\"https://www.googleapis.com/auth/indexing\",\"aud\":\"https://oauth2.googleapis.com/token\",\"exp\":$(( $(date +%s) + 3600 )),\"iat\":$(date +%s)}" | openssl dgst -sha256 -sign <(echo "$private_key") -binary | openssl base64 -A | tr '+' '-' | tr '/' '_' | tr -d '=')

            access_token=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=$jwt_token" "https://oauth2.googleapis.com/token" | jq -r '.access_token')

            google_response=$(curl -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $access_token" \
              -d "{\"url\": \"$url\", \"type\": \"URL_UPDATED\"}" \
              "https://indexing.googleapis.com/v3/urlNotifications:publish")
            echo "Google API Response: $google_response"
          done

